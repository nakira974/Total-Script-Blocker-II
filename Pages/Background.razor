@page "/background.html"
@inherits BackgroundPage
@using WebExtensions.Net.Tabs
@using WebExtensions.Net.Windows
@using Blazored.SessionStorage
@using System.Text.Json.Serialization
@using Lkhsoft.Utility
@using Microsoft.Extensions.Logging
@using Total_Script_Blocker_II.Models

@inject ISessionStorageService _sessionStorageService
@inject IJsonSerializer _jsonSerializer
@inject IJSRuntime _jsRuntime
@inject ILogger<Background> _logger

@page "/background.html"

@code{
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await _jsRuntime.InvokeVoidAsync("launchMessageListener", await GenerateAllSettings());
        }
        catch (Exception e)
        {
            _logger.LogError($"Background.razor OnAfterRenderAsync(bool firstRender) error {e.Message}\nStacktrace : {e.StackTrace}");
            throw;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();
    // this opens index.html in the extension as a new tab when the background page is loaded
            var extensionUrl = await WebExtensions.Runtime.GetURL("index.html");
            await WebExtensions.Tabs.Create(new CreateProperties
                                            {
                                                Url = extensionUrl
                                            });
        }
        catch (Exception e)
        {
            _logger.LogError($"Background.razor OnInitializedAsync() error {e.Message}\nStacktrace : {e.StackTrace}");
            throw;
        }
       
    }
    /// <summary>
    /// Open options.html and close other instance
    /// </summary>
    private async Task ShowOptionsPage()
    {
        try
        {
            var windows = (await WebExtensions.Windows.GetAll(new GetAllGetInfo() {AdditionalData = new Dictionary<string, object>() 
                                                                                                    {{"populate", true}}})).ToArray();
            
            for (var i = windows.Length - 1; i >= 0; i--)
            {
#pragma warning disable CS0618
                var optionsPageUrl = await WebExtensions.Extension.GetURL("options.html");
#pragma warning restore CS0618
                
                var window    = windows[i];
                
                var    tabsArray = window.Tabs.ToArray();
                for (var j = window.Tabs.ToArray().Length - 1; j >= 0; j--)
                {
                    var currentWindow = tabsArray[j];
                    if (!currentWindow.Url.Equals(optionsPageUrl)) continue;
                    var id = currentWindow.Id;
                    if (id is not null) await WebExtensions.Tabs.Remove(id.Value);
                }
                await WebExtensions.Tabs.Create(new CreateProperties() {Url = optionsPageUrl});
            }
        }
        catch (Exception e)
        {
            _logger.LogError($"Background.razor ShowOptionsPage() error {e.Message}\nStacktrace : {e.StackTrace}");
            throw;
        }
    }

    /// <summary>
    ///  Generates a json object with all the applicable settings for a website of "url".
    /// </summary>
    ///

    private async Task<string> GenerateAllSettings()
    {
        try
        {
            var tempAllowListHash = await _sessionStorageService.GetItemAsStringAsync("tempAllowListHash");
            var setting = new Settings(); 
    //TODO Create settings here
            return await _jsonSerializer.SerializeAsync(setting);
        }
        catch (Exception e)
        {
            _logger.LogError($"Background.razor GenerateAllSettings() error {e.Message}\nStacktrace : {e.StackTrace}");
            throw;
        }
        
    }
    
}
